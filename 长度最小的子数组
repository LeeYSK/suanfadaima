题目链接：https://leetcode.cn/leetbook/read/array-and-string/c0w4r/

给定一个含有 n 个正整数的数组和一个正整数 target 。

找出该数组中满足其和 ≥ target 的长度最小的 连续子数组 [numsl, numsl+1, ..., numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。
示例 1：
输入：target = 7, nums = [2,3,1,2,4,3]
输出：2
解释：子数组 [4,3] 是该条件下的长度最小的子数组。
  
示例 2：
输入：target = 4, nums = [1,4,4]
输出：1
  
示例 3：
输入：target = 11, nums = [1,1,1,1,1,1,1,1]
输出：0

算法思想：
  利用双指针构成滑动窗口，fast指针遍历数组，代表窗口的终止位置，
  当sum和大于等于target值是，进入循环，截取窗口长度
  1）当slow 与fast内的元素和>=target时，fast - slow + 1 记录窗口的长度，
  2）result保存每次>=target时的最小窗口长度（所以初始值要设为数组的长度），
  3）窗口内元素的和要减去slow指针所指元素的值，然后让slow指针收缩，
  fast指针遍历下一个元素，
  再次判断slow 与 fast内的元素和>=target，如果是，就重复上述1）2）3）步骤，否的话让fast继续遍历（扩大窗口）
  需要注意：若整个数组的值和小于target值时，要返回0，那么考虑这种情况，需要设置一个reminder，当大于target值时，设置为true
  若小于target值时，那么就是false，不返回result，返回0。
class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {

        //代码随想录解法滑动窗口

        int fast;//代表窗口的终止位置
        int result = nums.size();
        int slow = 0;//窗口的起始位置
        int sum = 0;//收集目前窗口内元素的和
        int length;//窗口的长度
        bool reminder = false;//定义一个指示器，防止目标值大于数组里所有值加起来的情况
        for(fast = 0;fast < nums.size();fast++)
        {
            //收集元素和
            sum += nums[fast];
            //当窗口内的和大于target时，不断的收缩窗口的起始位置
            while(sum >= target)
            {
                //计算窗口的长度
                length = fast - slow + 1;
                //取每轮收缩后的最小长度
                result = min(result,length);
                //sum减小
                sum = sum - nums[slow];
                //窗口起始位置收缩
                slow++;
                reminder = true;//说明有符合target值的子数组
            }
        }

        if(reminder != false)
        {
            return result;
        }else
        {
            //如果数组中的元素和加起来均不等于target，说明没有最小长度子数组，返回零
            return 0;
        }
        
    }
};
