题目链接：https://leetcode.cn/leetbook/read/array-and-string/c6u02/

题目描述：
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
请注意 ，必须在不复制数组的情况下原地对数组进行操作。

示例 1:
输入: nums = [0,1,0,3,12]
输出: [1,3,12,0,0]

示例 2:
输入: nums = [0]
输出: [0]

class Solution {
public:
    void moveZeroes(vector<int>& nums) {

        //算法思想：
        // 快慢指针，快指针遍历数组，慢指针始终指向第一个零元素，当快指针指向的元素不是0时，交换slow所指元素，
        // slow加一，快指针继续遍历，快指针与慢指针左闭右开区间的元素全是0，若没有找到不为0的元素，直接返回


        int fast = 0;//快慢指针
        int slow = 0;
        
        //快指针遍历数组
        while(fast < nums.size())
        {
            //找出一个不等于0的元素
            while(fast < nums.size() && nums[fast] == 0)
            {
                //如果数组内的元素全是0，直接返回
                if(fast == nums.size() - 1 && nums[fast] == 0)
                {
                    return;
                }
                fast++;
            }
            //交换快慢指针所指的元素，慢指针加一，快指针加一，慢指针始终指向0元素
             if(nums[fast] != 0)
            {
                int temp = nums[fast];
                nums[fast] = nums[slow];
                nums[slow] = temp;
                slow++; 
                fast++;
            }
        }
        return;
        // for(fast = 0;fast < nums.size();fast++)
        // {
        //     if(nums[fast] != 0)
        //     {
        //         int temp = nums[fast];
        //         nums[fast] = nums[slow];
        //         nums[slow] = temp;
        //         slow++; 
        //     }
        // }
      
    }
};
