题目链接：https://leetcode.cn/problems/happy-number/

题目描述：编写一个算法来判断一个数 n 是不是快乐数。
「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。
如果 n 是快乐数就返回 True ；不是，则返回 False 。
示例：
输入：19
输出：true

解释：
1^2 + 9^2 = 82
8^2 + 2^2 = 68
6^2 + 8^2 = 100
1^2 + 0^2 + 0^2 = 1

代码：//编写正整数的每位平方之和
    int getSum(int n)
    {
        int count = 0;
        while(n)
        {
            count += (n % 10) * (n % 10);//利用取余运算计算个位
            n /= 10;//然后在脱掉个位的数值
        }
        return count;
    }


    bool isHappy(int n) {

        //快慢指针，快指针每次走两个数，慢指针每次计算一个数
        //把整个计算的过程看成隐式链表，如果是快乐数，没有循环，那么快指针一定先到达1
        //若不是快乐数，存在循环，快指针在循环中一定可以追上慢指针，即在某个数，慢指针与快指针一定相遇
        int slow = n;
        int fast = getSum(n);

        while(fast != 1)//while循环控制fast没有到达1或者没有追上slow
        {
            if(fast == slow)
            {
                return false;
            }
            else
            {
                slow = getSum(slow);
                fast = getSum(getSum(fast));
            }
        }
        return true;




        //算法思想：
        //分为两步，第一步求n的下一个数字是什么
        //第二步，用set集合判断是否进入死循环

        unordered_set<int> set;//定义集合，存放平方数和之后的数组，
        //判断计算后的数字是否出现过集合中 
        
        while(1)
        {
           
            int sum = getSum(n);
            if(sum == 1)//若计算出n的每位上的平方和是1，说明次数是快乐数
            {
                return true;
            }

            //否则在set集合中找到了sum元素，表明sum值在前面的几轮计算算出来过，说明陷入了死循环
            if(set.find(sum) != set.end())
            {
                return false;
            }
            else//若没有找到，把sum元素放入set集合，用于判断是否出现死循环
            {
                set.insert(sum);
            }
            n = sum;

        }

    }
