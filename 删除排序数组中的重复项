题目链接：https://leetcode.cn/leetbook/read/array-and-string/cq376/

题目描述：给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。然后返回 nums 中唯一元素的个数。
考虑 nums 的唯一元素的数量为 k ，你需要做以下事情确保你的题解可以被通过：
更改数组 nums ，使 nums 的前 k 个元素包含唯一元素，并按照它们最初在 nums 中出现的顺序排列。nums 的其余元素与 nums 的大小不重要。
返回 k 。

示例 1：
输入：nums = [1,1,2]
输出：2, nums = [1,2,_]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。

示例 2：
输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。


class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
       
       //算法思想：
    //    利用快慢指针，快指针遍历数组，
    //    慢指针指向只出现一次的元素最后一个，
    //    若fast所指元素与slow所指元素相同，fast继续遍历
    //    值不相同时停下，slow加一，与快指针交换元素，因为时升序序列，所以交换后仍是原来顺序
    //    要注意若数组内元素全相同时的情况以及单个元素的情况
        int fast = 0;
        int slow = 0;
       

        while(fast < nums.size())
        {
            while(fast < nums.size() && nums[fast] == nums[slow])
            {

                fast++;
            }
            if(fast < nums.size() && nums[fast] != nums[slow])
            {
                slow++;
                 nums[slow] = nums[fast];
                 fast++;
            }
            
            
        }
        return slow + 1;
    }
};
