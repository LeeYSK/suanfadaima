题目链接：https://leetcode.cn/problems/two-sum/

题目描述：给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。
示例 1：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

示例 2：
输入：nums = [3,2,4], target = 6
输出：[1,2]

示例 3：
输入：nums = [3,3], target = 6
输出：[0,1]
 代码：
 vector<int> twoSum(vector<int>& nums, int target) {
        //思想：重点是应该想到用哈希表来做题，是需要在集合中判断是否存在与nums[i]相加==target的元素
        //若存在，返回数组下标，若不存在，将我们遍历过的元素放入集合中
        //因为需要知道数组元素和下标，所以要使用key，value来存储数据（set只能存储key
        //选择使用unordered_map的效率更高
        unordered_map<int,int> map;
        for(int i = 0;i < nums.size();i++)
        {
            int s = target - nums[i];
            auto iter = map.find(s);
            if(iter != map.end())//在map中找到了与nums[i]相加的元素
            {
                return{iter->second,i};
            }
            else
            {
                map.insert(pair<int,int>(nums[i],i));

                //map[nums[i]] = i;//插入的一种方式
            }
        }
        return {};
        
    }
