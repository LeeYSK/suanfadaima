题目链接：https://leetcode.cn/problems/pascals-triangle-ii/description/

给定一个非负索引 rowIndex，返回「杨辉三角」的第 rowIndex 行。

在「杨辉三角」中，每个数是它左上方和右上方的数的和。

示例 1:
输入: rowIndex = 3
输出: [1,3,3,1]

示例 2:
输入: rowIndex = 0
输出: [1]

示例 3:
输入: rowIndex = 1
输出: [1,1]

算法思想：空间复杂度为o（n），不需要设置rowIndex行的杨辉三角，只返回rowindex行的元素。这样做空间复杂度是o（n2），
          设置一个一维数组ans来模拟第rowindex行的元素，rowindex行的元素个数是rowindex + 1，初始值全部置为1.
          如果rowindex的值=<1,前两行元素均为1，直接返回ans,否则利用i指针迭代更新ans数组，i代表迭代的次数，从一开始，每次迭代前把数组看成上一行的数值
          每轮利用j指针从倒数第二个元素更新（首尾元素均为1，不需要更新）,使ans【j】 = ans【j】 + ans【j - 1】，j--。
          最后返回ans数组

class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> ans(rowIndex + 1,1);//设定一维数组模拟要返回杨辉三角的第rowIndex行，初始值全为1

        //如果rowIndex小于2，说明元素全为1
        if(rowIndex < 2)
        {
            return ans;
        }

        //需要迭代的次数
        for(int i = 1;i < rowIndex;i++)
        {
            //j指针在每轮开始时指向逻辑上的倒数第二个元素，每次更新迭代后，j--
            for(int j = i;j > 0;j--)
            {
                ans[j] = ans[j - 1]+ans[j];
            }
        }
        return ans;



    }
};
