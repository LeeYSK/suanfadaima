题目链接：https://leetcode.cn/problems/valid-anagram/

题目描述：给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。

注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。

示例 1:
输入: s = "anagram", t = "nagaram"
输出: true
  
示例 2:
输入: s = "rat", t = "car"
输出: false
  代码：
  bool isAnagram(string s, string t) {
        //算法思想
        // 利用哈希表，给定的字符串均为小写字母，定义一个数组(哈希表)记录每个字母出现的次数，大小26
        // s[i] - 'a'作用是将a-z字母映射到数组下标(哈希表的索引下标)中，因为a-z在ASCII码中是连续的数值
        // 所以a - 'a'就是下标0
        // 所以，在遍历时，只需将s[i] - 'a'所在数组中的元素+1即可，这样就统计出来了出现的次数
        // 在遍历另一个字符串时，只要s[i] - 'a'坐在数组中的元素-1即可
        // 最后，如果数组中不全为零，说明两个字符串一定少了或者多了字母

        int hash[26] = {0};
        for(int i = 0;i < s.size();i++)//循环s字符串，记录s串中每个单词出现的次数
        {
    //不用记住a的ASCII码，s[i] - 'a'（c++默认是ASCII码相减）计算出来就是a-z在数组中顺序排列的下标
            hash[s[i] - 'a']++;//hash[s[i] - 'a']取出hash数组下标的数据++，记录每个字母出现的次数
        }
        for(int i = 0;i < t.size();i++)//循环t字符串中字母出现的次数
        {
            //此时hash数组中的数据是记录s字符串中的字母出现的次数
            //如果要判断是否为异位词，要减去数组中数据
            hash[t[i] - 'a']--;
        }
        for(int i = 0;i < 26;i++)
        {
        //如果hash数组中有不全为0的元素，说明s或t一定多了或者少了字母
            if(hash[i] != 0)
            {
                return false;
            }
        }

        //数组全为0时，说明s与t字母出现的次数相同，即为异位词
        return true;

    }
