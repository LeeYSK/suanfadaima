https://leetcode.cn/leetbook/read/array-and-string/cd71t/

给定一个二进制数组 nums ， 计算其中最大连续 1 的个数。

 

示例 1：

输入：nums = [1,1,0,1,1,1]
输出：3
解释：开头的两位和最后的三位都是连续 1 ，所以最大连续 1 的个数是 3.
示例 2:

输入：nums = [1,0,1,1,0,1]
输出：2

算法思想：
使用快慢指针，定义一个计数器，快指针遍历数组，计数器的值每轮更新，始终为连续1个数的最大值
当快指针所指元素指向1时，慢指针不动，当不为1时，慢指针指向快指针的下一个元素

class Solution {
public:
    int findMaxConsecutiveOnes(vector<int>& nums) {

        //快慢指针和计数器
        int fast = 0;
        int slow = 0;
        int count = 0;
       while(fast < nums.size())
        {
            if(nums[fast] == 0)//当快指针指向的元素不是1的时候，让slow指针指向fast下一个元素
            {
                slow = fast + 1;
            }
            else
            {   //否则，当指向的是1时，每次更新count的数值
                count = max(fast - slow + 1,count);
            }
            fast++;
        }
return count;
