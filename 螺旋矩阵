题目链接：https://leetcode.cn/problems/spiral-matrix-ii/submissions/

题目描述：
      给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。
示例 1：
输入：n = 3
输出：[[1,2,3],[8,9,4],[7,6,5]]

示例 2：
输入：n = 1
输出：[[1]]
 
提示：
1 <= n <= 20

代码：
      vector<vector<int>> generateMatrix(int n) {

       // 算法思想：坚持循环不变量原则，见代码随想录,每条边遍历时按一样的规则去遍历
       //左闭右开， 填充上行从左到右
                // 填充右列从上到下
                // 填充下行从右到左
                // 填充左列从下到上
                // 由外向内一圈一圈这么画下去。

        vector<vector<int>> nums (n,vector<int>(n,0));//定义二维数组

        int starty = 0;//定义每循环横向边的起始位置

        int startx = 0;//定义每次遍历竖向边的起始位置

        int offset = 1;//作用是控制区间，不遍历每条边的最后一个节点，左闭右开
        int count = 1;//为矩阵赋值
        int loop = n / 2;//总共循环一次，假设n为3，loop=1剩下的一个位置单独赋值
        int mid = n / 2;//定位矩阵的中间元素位置，n为(3)奇数时，mid = 1；中间单独元素为[mid][mid]
        int i;
        int j;
        while(loop --)
        {
            j = starty;
            i = startx;
            //开始循环第一条边
            for(;j < n - offset;j++)
            {
                nums[startx][j] = count++;
            }
            //遍历第二条竖向边
            for(;i < n - offset;i++)
            {
                nums[i][j] = count++;
            }
            //遍历最下面的边
            for(;j > starty;j--)
            {
                nums[i][j] = count++;
            }
            //从左上遍历最后一条竖边
            for(;i > startx;i--)
            {
                nums[i][j] = count++;
            }
            startx++;
            starty++;
            offset++;

            

        }
        if(n % 2 == 1)
        {
                nums[mid][mid] = count++;
        }

        return nums;
    }
