题目链接：https://leetcode.cn/leetbook/read/array-and-string/cwuyj/

给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。

元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。

作者：LeetCode
链接：https://leetcode.cn/leetbook/read/array-and-string/cwuyj/
来源：力扣（LeetCode）


算法思想：使用快慢指针解决问题
slow指向移除后数组最后一个元素的下一个地址
当fast指针不等于要移除的元素时，nums[slow] = nums[fast]，slow指针加1；
最后循环结束时，slow的值为新数组元素的个数


class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int fast = 0;//定义快慢指针
        int slow = 0;//慢指针指向数组的最后一个元素的下一个地址，相当于计数器
       
        while(fast < nums.size())
        {
            if(nums[fast] != val)//当fast指针不等于val时，fast指向的元素和slow指向的元素互换位置，slow移动
            {
                nums[slow] = nums[fast];
                slow++;
                //i = 1 + i;
            }
            fast++;
        }//跳出循环时，slow的值就是非val元素的个数
        
        return slow ;
    }
};
